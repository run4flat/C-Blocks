# The Computer Language Benchmarks Game
#  http://benchmarksgame.alioth.debian.org/
#
#  contributed by Mykola Zubach
#  modified by David Mertens to use C::Blocks

use strict;
use warnings;
use C::Blocks;
use C::Blocks::Types qw(uint char_array);
use C::Blocks::PerlAPI;


my uint ($w, $h);
my (@threads, $invN);

sub draw_line($) {
   my uint $y = shift;
   my char_array $line_contents;
   vec ($line_contents, $w / 8 - 1, 8) = 0;
	cblock {
		int bit_num = 0;
		char byte_acc = 0;
		int i, iter = 50;
		double x, limit = 2.0;
		double Zr, Zi, Cr, Ci, Tr, Ti;
		
        for(x=0; x < $w; ++x) {
            Zr = Zi = Tr = Ti = 0.0;
            Cr = (2.0 * x / $w - 1.5);
            Ci=(2.0*$y/$h - 1.0);
        
            for (i=0;i<iter && (Tr+Ti <= limit*limit);++i)
            {
                Zi = 2.0*Zr*Zi + Ci;
                Zr = Tr - Ti + Cr;
                Tr = Zr * Zr;
                Ti = Zi * Zi;
            }
       
            byte_acc <<= 1; 
            if(Tr+Ti <= limit*limit) byte_acc |= 0x01;
                
            ++bit_num; 

            if(bit_num == 8) {
                $line_contents[(int)(x/8)] = byte_acc;
                byte_acc = 0;
                bit_num = 0;
            }
            else if(x == $w-1) {
                byte_acc <<= (8 - $w % 8);
                $line_contents[(int)(x/8)] = byte_acc;
                byte_acc = 0;
                bit_num = 0;
            }
        }
	}
	return $line_contents;
}


use threads;
use threads::shared;
my @jobs :shared;
my @picture :shared;

sub process_queue() {
   while(defined(my $y = pop @jobs)) {
      $picture[$y] = draw_line($y);
   }
}

sub num_cpus() {
   open my $fh, '</proc/cpuinfo' or return 4;
   my $cpus;
   while(<$fh>) {
      $cpus ++ if /^processor\s+:/;
   }
   return $cpus;
}

## MAIN()

$w = $h = shift || 200;
$invN = 2 / $w;
@jobs = (0 .. $h - 1);

for (1 .. num_cpus()) {
   push @threads, threads->create(\&process_queue);
}

for (@threads) {
   $_->join;
}

print "P4\n$w $h\n"; # PBM image header
print @picture;
