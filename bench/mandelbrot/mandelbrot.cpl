use strict;
use warnings;

use C::Blocks;
use C::Blocks::Types qw(uint char_array);
use C::Blocks::PerlAPI;

my uint $w = my uint $h = shift || 200;
my $bytes_per_line = $w / 8;

print "P4\n$w $h\n"; # PBM image header

# Allocate the line contents so that we have something that we can
# easily manipulate.
my char_array $line_contents;
my $N_bytes = $w % 8 == 0 ? $w / 8 : int($w / 8) + 1;
vec ($line_contents, $N_bytes - 1, 8) = 0;

for my uint $y ( 0 .. $h-1) {
	cblock {
		int bit_num = 0;
		char byte_acc = 0;
		int i, iter = 50;
		double x, limit = 2.0;
		double Zr, Zi, Cr, Ci, Tr, Ti;
		
        for(x=0; x < $w; ++x) {
            Zr = Zi = Tr = Ti = 0.0;
            Cr = (2.0 * x / $w - 1.5);
            Ci=(2.0*$y/$h - 1.0);
        
            for (i=0;i<iter && (Tr+Ti <= limit*limit);++i)
            {
                Zi = 2.0*Zr*Zi + Ci;
                Zr = Tr - Ti + Cr;
                Tr = Zr * Zr;
                Ti = Zi * Zi;
            }
       
            byte_acc <<= 1; 
            if(Tr+Ti <= limit*limit) byte_acc |= 0x01;
                
            ++bit_num; 

            
            if(bit_num == 8) {
                $line_contents[(int)(x/8)] = byte_acc;
                byte_acc = 0;
                bit_num = 0;
            }
            else if(x == $w-1) {
                byte_acc <<= (8 - $w % 8);
                $line_contents[(int)(x/8)] = byte_acc;
                byte_acc = 0;
                bit_num = 0;
            }
        }
	}
	print $line_contents;
}

