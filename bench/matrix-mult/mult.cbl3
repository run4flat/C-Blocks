use strict;
use warnings;
use C::Blocks;
use C::Blocks::PerlAPI;
use C::Blocks::Type;

sub load_data {
	my ($filename, $data_ref) = @_;
	open my $in_fh, '<', $filename or die "Unable to open $filename\n";
	local $/;
	$$data_ref = <$in_fh>;
}

# Load A and B
my ($A, $B);
load_data('A.bin', \$A);
load_data('B.bin', \$B);

# Check dimensions
length($A) == length($B) or die "Sizes for A and B differ\n";
my $m = sqrt(length($A) / 8);
$m = int($m) or die "A is not a square matrix\n";

# Allocate room for the result
vec (my $C, length($B) - 1, 8) = 0;

# Use a blas matrix multiply
BEGIN { $C::Blocks::library_to_link = 'libblas.so' }
clex { #include <cblas.h> }

cisa C::Blocks::Type::int $m;
cisa C::Blocks::Type::Buffer::double $A, $B, $C;

cblock {
	cblas_dgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, $m, $m, $m,
		1.0, $A, $m, $B, $m, 0.0, $C, $m);
}
print $C;
