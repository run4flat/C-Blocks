=head1 NAME

C::Blocks - embeding a fast C compiler directly into your Perl parser

=head1 PRE-ALPHA

This project is currently in pre-alpha. (See the goals and milestones below.)
Using this software is likely to cause segmentation faults and the API is likely
to change over time. Basically, if you're not actively developing this code, you
should probably steer clear of it for now.

=head1 DEVELOPMENT BOOTSTRAPPING

This software is in active development and is not (quite) set up for
distribution on CPAN. Instead, it is set up to help developers and early testers
get started as quickly and painlessly as possible. To that end, it will
automatically install the most recent development version of the Tiny C Compiler
to a directory within your C::Blocks build directory when you run C<Build.PL>.
Thus, to get started, simply say:

 git clone https://github.com/run4flat/C-Blocks.git
 cd C-Blocks
 perl Build.PL

This will automatically pull the latest version of my fork of the Tiny C
Compiler, build it, and install it to a local directory for you. There is only
one thing special you will have to do: you will need to include a definition of
C<LD_LIBRARY_PATH> in your calls to C<Build>, like so (on my machine):

 LD_LIBRARY_PATH="/home/dcmertens/projects/Perl/C-Blocks/tinycc/lib" ./Build test

A message will be printed with the correct path for you if you fail to do this.

=head1 DESCRIPTION

This distribution contains C<C::Blocks>, a module that adds a few lexically
scoped keywords to your Perl parser. These keywords delimit C code blocks, and
(in the current implementation) the code within them is compiled during Perl's
bytecode compilation phase. The keywords including C<cblock>, C<clex>,
C<cshare>, and C<csub>.

In addition, this distribution contains C<C::Blocks::libperl>, which loads the
Perl C API. I plan to include similar modules for all standard C libraries,
such as libstdio, libmath, etc. Since libperl is itself compiled with these
libraries, I suspect that most of them will be redundant.

Finally, this distribution presently includes C<C::Blocks::StretchyBuffer> and
C<C::Blocks::Chain>. The first provides a rudimentary vector type, while the
latter provides a rudimentary linked list type. I plan to either expand the
number of similar container libraries, or get rid of them.

=head1 GOALS AND MILESTONES

I have a number of goals I would like to accomplish for this project.

=head2 Alpha CPAN Release

I want to accomplish the following before I make the alpha release of
C<C::Blocks> to CPAN, v0.01:

=over

=item share global variables

Although it appears that functions are correctly shared across blocks, it looks
like global variables are not. At least, this appears to be the case for test
10.

=item load libperl

libperl used to work. Now it is giving trouble. Since libperl is required for
certain basic functionality, it has priority.

=item Expand the test suite

I need to write a comprehensive test of the API, for user and library author
alike. Failures in most of my tests up to this point have revealed bugs in the
underlying C compiler hooks, but with those mostly fixed, it is time to test
C<C::Blocks> itself, not the hooks of the underlying library.

It would be good to push the system with things like typedefs, crazy
preprocessor macros, and complex nested structs. Perhaps such tests could live
in this distribution as author tests, but probably most of them should be pushed
back upstream.

=back

=head2 Beta CPAN Release

Once the distribution hits CPAN as an alpha library, I will need to do a number
of things to make it faster and more robust. By the time C<C::Blocks> hits v0.50
I want to accomplish the following:

=over

=item Switch to call_checker and call_parser

The keyword API is so yesterday. I used it for prototyping, but I need to switch
to the new method. That doesn't need to happen before it hits CPAN, but I would
like for it to happen soon.

=item Extended Symbol Table Caching

The symbol table copy procedure is time consuming and runs on the order of N**2,
where N is the number of symbols in the table. I plan to create symbol table
dump and load functionality in my fork of tcc. Once that is in place, I need to
use it with libperl.

=back

=head2 v1.0

For the first prime-time release of C<C::Blocks>, I want to have the following:

=over

=item Simple C-based Object System

I plan to write a module that makes it easy to write single-inheritance object
oriented C code. My current plans are to steal from Prima, which does this sort
of thing exceptionally well.

=item Author API for extended symbol table caching

Authors writing a C<C::Blocks> interface for their C library should be able to
utilize the symbol table load/dump functionality (that will be) used by libperl.
Once it's working for libperl, I want to create author tools for
L<Module::Build> and L<ExtUtils::MakeMaker> so that the symbol table cache can
be created at distribution build time.

=item C::Blocks::lib

Write a module that makes it easy to import a bunch of C::Blocks modules in
one shot, i.e.

 use C::Blocks::lib qw(perl gsl prima);

would be equivalent to

 use C::Blocks::libperl;
 use C::Blocks::libgsl;
 use C::Blocks::libprima;

=back

=head2 v2.0

By v2.0, I want to expand C<C::Blocks> to be a front end with multiple back
ends. This means I would need to turn attention to authoring tools.

=item Generate Inline::C, XS, ExtUtils::Depends

Right now the C code gets compiled at Perl's parse time. Once the C code is out
of the prototyping stage, it would be nice to be able to automatically extract
it and generate .h and .c files that can be compiled by the system's optimizing
compiler. I need to write author tools that would allow this to be done using
Inline::C, or to generate XS files with the proper scoping. Of course, it would
also make sense for the contents of those header files to be accessible to other
XS authors via ExtUtils::Depends.

=item Utilize ExtUtils::Depends

There is a lot of overlap between C<C::Blocks> and ExtUtils::Depends, and
undoubtedly users of C<C::Blocks> would like to have access to functions and
data structures that are made available through ExtUtils::Depends. It would be
nice to provide some sort of automatic C::Blocks wrapper for ExtUtils::Depends
based modules.

=item Threadsafe

The Tiny C Compiler uses lots of global variables and is therefore not
threadsafe. I would like to contribute back to the project by encapsulating all
of that global state into the compiler state object, where it belongs. Others in
the tcc community have expressed interest in getting this done, so it is a
welcome contribution.

=back

=head1 CURRENT STATUS

As of May 29, 2014, the pass/fail matrix is this:

 System \ Test          | 01 | 02 | 03 | 04 | 10 | 12 |
 ------------------------------------------------------
 XP Strawberry 5.18     |  y |  y |  y |  y |  y |  y |
 Mac perlbrew 5.18 sh   |  y |  y |  y |  y | #3 |  y |
 Mac perlbrew 5.18 st   |  y |  y |  y | #4 | #3 |  y |
 Wheezy sys 5.14        |  y |  y |  y |  y | #3 |  y |
 BeagleBone Wheezy 5.14 |  y |  y |  y |  y | #3 |  y |

Any failures are enumerated in the table and described below. If
things change, or if you have a new result, please add it to the
table and update the failure descriptions below.

=over

=item 3

Test #10 sometimes gives the following error when run on Linux and Mac
systems:

 t/10-clex.t:23: error: exsymtab copy unable to locate extended symbol for token 65502020

The token number changes, but the error message is the same. There is no other
output. On Mac systems, this error cropped up more often when running with
C<prove>, but prove is not required to reproduce the problem. On BBB, this
error occurs consistently.

=item 4

On any default-compiled Perlbrew, the generated F<libperl> is a static
library. There is a slim chance that TCC can link against a static
library on Windows and Linux. There is no chance that it can link
against a static library on Mac. Any tests against L<C::Blocks::libperl>
will fail in this situation.

=item 7

This is the next item.

=back

As of late May 26, I modifed test #12 so that it actually generates a new
struct of data and sends it back to Perl using C<c_blocks_send_bytes>. This new
test is more techniclly correct and avoids the segfaults that had been giving
trouble on Windows.

=head1 SEE ALSO

This module uses the Tiny C Compiler through the Alien package provided
by L<Alien::TinyCC>. To learn more about the Tiny C Compiler, see
L<http://bellard.org/tcc/> and L<http://savannah.nongnu.org/projects/tinycc>.

For other ways of compiling C code in your Perl scripts, check out
L<Inline::C>, L<C::TinyCompiler>, and L<XS::TCC>.

=head1 AUTHOR

David Mertens (dcmertens.perl@gmail.com)

=head1 BUGS

Please report any bugs or feature requests for the Alien bindings at the
project's main github page:
L<http://github.com/run4flat/C-Blocks/issues>.

=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc C::Blocks

You can also look for information at:

=over 4

=item * The Github issue tracker (report bugs here)

L<http://github.com/run4flat/C-Blocks/issues>

=item * AnnoCPAN: Annotated CPAN documentation

L<http://annocpan.org/dist/C-Blocks>

=item * CPAN Ratings

L<http://cpanratings.perl.org/d/C-Blocks>

=item * Search CPAN

L<http://p3rl.org/C::Blocks>
L<http://search.cpan.org/dist/C-Blocks/>

=back

=head1 ACKNOWLEDGEMENTS

This would not be possible without the amazing Tiny C Compiler or the
Perl pluggable keyword work. My thanks goes out to developers of both of
these amazing pieces of technology.

=head1 LICENSE AND COPYRIGHT

Code copyright 2013 Dickinson College. Documentation copyright 2013 David
Mertens.

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.

=cut

