=head1 NAME

C::Blocks - embeding a fast C compiler directly into your Perl parser

=head1 SYNOPSIS

 use strict;
 use warnings;
 use C::Blocks;
 use C::Blocks::libperl;
 
 our $global_var = "Before first cblock";
 print "Before the first cblock, \$global_var conains [$global_var]\n";
 
 cblock {
     /* This is raw C code! */
     SV * global = get_sv("global_var", 0);
     sv_setpv(global, "After first cblock");
 }
 
 print "After the first cblock, \$global_var conains [$global_var]\n";

=head1 DEVELOPMENT BOOTSTRAPPING

This software is in active development and is not (quite) set up for distribution
on CPAN. Instead, it is set up to help you get started as quickly and painlessly
as possible. To that end, it will automatically install the most recent
development version of the Tiny C Compiler to a directory within your C::Blocks
build directory when you run C<Build.PL>. Thus, to get started, simply say:

 git clone https://github.com/run4flat/C-Blocks.git
 cd C-Blocks
 perl Build.PL

This will automatically pull the latest tinycc, build it, and install it to a
local directory for you. There is only one thing special you will have to do:
you will need to include a definition of C<LD_LIBRARY_PATH> in your calls to
C<Build>, like so (on my machine):

 LD_LIBRARY_PATH="/home/dcmertens/projects/Perl/C-Blocks/tinycc/lib" ./Build test

A message will be printed with the correct path for you if you fail to do this.

=head1 ALPHA

This project is currently in alpha. Using this software is likely to
cause segmentation faults and the API is likely to change over time.
Basically, if you're not actively developing this code, you should
probably steer clear of it for now.

=head1 DESCRIPTION

This module uses Perl's pluggable keyword API to add a number of new
keywords including C<cblock>, C<clex>, C<cshare>, and C<csub>.

=over

=item cblock

The C<cblock> keyword is immediately followed by a curly-bracket
delimited block of C code. That code is wrapped into a specially formed
function and compiled at Perl parse time. An OP is then inserted into
the generated OP tree that knows how to call that function whenever
the Perl interpreter reaches this execution point.

=item clex, cshare

The C<clex> and C<cshare> keywords are immediately followed by a
curly-bracket delimited block of C code. That code is compiled at Perl
parse time and the symbol table is made accessible to later C<clex>s,
C<cshare>s, and C<cblock>s in the current lexical scope. In other words,
you can write struct layouts and functions in C<clex> and C<cshare>
blocks that you can later use in C<cblocks>. Furthermore, any code in
C<cshare> blocks is added to the current package's list of shared code
blocks, and the struct definitions, typedefs, macros, function
declarations, and function definitions can be imported into a caller's
lexical scope using C<cuse> (which is likely to be replaced soon, see
below).

=back

=head1 CURRENT STATUS

As of May 29, 2014, the pass/fail matrix is this:

 System \ Test          | 01 | 02 | 03 | 04 | 10 | 12 |
 ------------------------------------------------------
 XP Strawberry 5.18     |  y |  y |  y |  y |  y |  y |
 Mac perlbrew 5.18 sh   |  y |  y |  y |  y | #3 |  y |
 Mac perlbrew 5.18 st   |  y |  y |  y | #4 | #3 |  y |
 Wheezy sys 5.14        |  y |  y |  y |  y | #3 |  y |
 BeagleBone Wheezy 5.14 |  y |  y |  y |  y | #3 |  y |

Any failures are enumerated in the table and described below. If
things change, or if you have a new result, please add it to the
table and update the failure descriptions below.

=over

=item 3

Test #10 sometimes gives the following error when run on Linux and Mac
systems:

 t/10-clex.t:23: error: exsymtab copy unable to locate extended symbol for token 65502020

The token number changes, but the error message is the same. There is no other
output. On Mac systems, this error cropped up more often when running with
C<prove>, but prove is not required to reproduce the problem. On BBB, this
error occurs consistently.

=item 4

On any default-compiled Perlbrew, the generated F<libperl> is a static
library. There is a slim chance that TCC can link against a static
library on Windows and Linux. There is no chance that it can link
against a static library on Mac. Any tests against L<C::Blocks::libperl>
will fail in this situation.

=item 7

This is the next item.

=back

As of late May 26, I modifed test #12 so that it actually generates a new
struct of data and sends it back to Perl using C<c_blocks_send_bytes>. This new
test is more techniclly correct and avoids the segfaults that had been giving
trouble on Windows.

=head2 Old error reports for tests that that now pass

=over

=item 1

On Windows XP running Strawberry Perl 5.18, the very first subtest
of test 04 prints its status:

 ok 1 - Can set Perl data in a cblock using direct function calls

Then Perl crashes.

=item 2

On Windows XP running Strawberry Perl 5.18, for test 10, all cblocks
compile fine, and everything runs fine until I try to execute a
cblock that calls a function that was already called by a previous
cblock. This happens to be the code just after test #14, "sending foo
works". Thereafter, the process crashes.

=item Old 3

On Mac and Linux, test 10 sometimes displays the following error:

 Internal error: unable to locate extended symbol

Other times, it runs the full test suite, passing all but the last
test. for that test, it always reports some odd mish-mashed string,
certainly not the string that I sent it the first time.

=item Old 5

All operating systems appear to segfault with test 12 after the 11th
subtest. That subtest is the *second* subtest in which I would actually
manipulate data in an already allocated struct. It appears that the
second time through when actually manipulating things, we get weird
segfaults.

=item 6

With the introduction of lexical interpolation, test 04 fails completely on
Windows XP running Strawberry Perl 5.18 and Debian Wheezy running perlbrew
with v5.18.2. The failure message is:

 C::Blocks error:
 t/04-libperl.t:60: error: struct or union expected

I believe that the trouble arises in the auto-generated code inserted via the
C<C_BLOCK_PREDECLARATIONS> macro, which is supposed to pre-declare the SV *
variables at the top of the block function. This almost certainly is due to
some type being undeclared in MinGW and Linux headers.

If the final C<cblock> (which uses the interpolation) is commented out, the
issue is not a problem. The test runs, and the last check fails, obviously,
since the last  C<cblock> can't do its magic.

=over

This was fixed by explicitly casting C<my_perl> to type C<PerlInterpreter*>.
Better handling for C<my_perl>'s type is in order, but my first attempts
failed, so I am putting that off until later.

=back

=back

=head1 GOALS

I have a number of goals I would like to accomplish for this project.

=over

=item Expanded test suite

I have managed to squash many segfaults, and now most tests pass on
most operating systems. I need to push the system with more tests,
including things like typedefs, crazy preprocessor macros, and complex
nested structs.

=item Squash all segfaults

I am still encountering a few of segfaults. I need to figure out what
gives rise to those and plug them.

=item Extended Symbol Table Caching

The current symbol table copying implemented in Alien::TinyCC's copy
of tcc involves an N**2 lookup procedure. For large code bases such
as libperl's, the copy procedure takes on the order of seconds. I
would like to hack on tcc to provide extended symbol table dump and
load functionality to minimize the startup time when using
L<C::Blocks::libperl>.

=item Switch to call_checker and call_parser

The keyword API is so yesterday. I used it for prototyping, but I
need to switch to the new method. That doesn't need to happen before
it hits CPAN, but I would like for it to happen soon.

=item Threadsafe

The Tiny C Compiler uses lots of global variables and is therefore not
threadsafe. I would like to contribute back to the project by
encapsulating all of that global state into the compiler state object,
where it belongs. Others in the tcc community have expressed interest in
getting this done, so it is a welcome contribution.

=item Extraction for optimized compiling

Right now the C code gets compiled at Perl's parse time. However, for
code that doesn't change, it would be nice to prototype the code using
C::Blocks, then extract the op-code definitions into an XS file to be
compiled by an optimized compiler (such as gcc). This would require
writing a second pluggable keyword module that takes the same input and
generates XS output instead of compiling the code.

=back

=head1 SEE ALSO

This module uses the Tiny C Compiler through the Alien package provided
by L<Alien::TinyCC>. To learn more about the Tiny C Compiler, see
L<http://bellard.org/tcc/> and L<http://savannah.nongnu.org/projects/tinycc>.

For other ways of compiling C code in your Perl scripts, check out
L<Inline::C>, L<C::TinyCompiler>, and L<XS::TCC>.

=head1 AUTHOR

David Mertens (dcmertens.perl@gmail.com)

=head1 BUGS

Please report any bugs or feature requests for the Alien bindings at the
project's main github page:
L<http://github.com/run4flat/C-Blocks/issues>.

=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc C::Blocks

You can also look for information at:

=over 4

=item * The Github issue tracker (report bugs here)

L<http://github.com/run4flat/C-Blocks/issues>

=item * AnnoCPAN: Annotated CPAN documentation

L<http://annocpan.org/dist/C-Blocks>

=item * CPAN Ratings

L<http://cpanratings.perl.org/d/C-Blocks>

=item * Search CPAN

L<http://p3rl.org/C::Blocks>
L<http://search.cpan.org/dist/C-Blocks/>

=back

=head1 ACKNOWLEDGEMENTS

This would not be possible without the amazing Tiny C Compiler or the
Perl pluggable keyword work. My thanks goes out to developers of both of
these amazing pieces of technology.

=head1 LICENSE AND COPYRIGHT

Code copyright 2013 Dickinson College. Documentation copyright 2013 David
Mertens.

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.

=cut

